using System;

using ObjCRuntime;
using Foundation;
using UIKit;
using BrightcoveSDK.iOS;

namespace BrightcoveGoogleCast.iOS
{
	// @protocol BCOVGoogleCastManagerDelegate
	[Protocol, Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface BCOVGoogleCastManagerDelegate
	{
        // @required @property (readonly, nonatomic, strong) id _Nullable playbackController;
        [Abstract]
        [NullAllowed, Export("playbackController", ArgumentSemantic.Strong)]
		BCOVPlaybackController PlaybackController { get; }

		// @optional -(void)switchedToLocalPlayback:(id)lastKnownStreamPosition withError:(id)error;
		[Export("switchedToLocalPlayback:withError:")]
		void SwitchedToLocalPlayback(NSObject lastKnownStreamPosition, NSObject error);

		// @optional -(void)switchedToRemotePlayback;
		[Export("switchedToRemotePlayback")]
		void SwitchedToRemotePlayback();

		// @optional -(void)currentCastedVideoDidComplete;
		[Export("currentCastedVideoDidComplete")]
		void CurrentCastedVideoDidComplete();

		// @optional -(void)castedVideoFailedToPlay;
		[Export("castedVideoFailedToPlay")]
		void CastedVideoFailedToPlay();

		// @optional -(void)suitableSourceNotFound;
		[Export("suitableSourceNotFound")]
		void SuitableSourceNotFound();
	}

	// @interface BCOVGoogleCastManager
	//[Model]
	[BaseType(typeof(BCOVPlaybackSessionConsumer))]
	interface BCOVGoogleCastManager //: BCOVPlaybackSessionConsumer
	{
		//+(BCOVGoogleCastManager *)sharedManager;
		[Static]
		[Export("sharedManager")]
        //BCOVGoogleCastManager SharedManager { get; }
        BCOVGoogleCastManager SharedManager();

        [Wrap("WeakDelegate")]
		BCOVGoogleCastManagerDelegate Delegate { get; set; }

		// @property (nonatomic, weak) id<BCOVGoogleCastManagerDelegate> delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (nonatomic, strong) GCKImage * fallbackPosterImage;
		[Export("fallbackPosterImage", ArgumentSemantic.Strong)]
		//Hack
		NSObject FallbackPosterImage { get; set; }

		// @property (assign, nonatomic) int posterImageSize;
		[Export("posterImageSize")]
		int PosterImageSize { get; set; }
	}
}

